#pragma once

#include <cstdlib>
#include <cstring>
#include <cstdio>

namespace std
{
    class string
    {
    private:
        char* _str;
        size_t _size;

        void reallocate()
        {
            if(_str != nullptr)
            {
                free((void*)_str);
            }

            _str = (char*)malloc(sizeof(char) * _size);
        }

    public:
        string()
        {
            _size = 1;
            reallocate();
        }

        string(const char* str)
        {
            string();
            *this = str;
        }

        void operator=(const char* str)
        {
            _size = strlen(str);
            reallocate();
            strcpy(_str, str);
        }

        char& at(int index)
        {
            return _str[index];
        }

        char& operator[](int index)
        {
            return at(index);
        }

        const char* c_str()
        {
            return _str;
        }

        size_t length()
        {
            return _size;
        }

        size_t size()
        {
            return _size;
        }

        ~string()
        {
            if(_str != nullptr)
            {
                memory_free((void*)_str);
            }
        }
    };
}
