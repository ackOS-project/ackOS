#pragma once

#include <cstring>

namespace std
{
    class string
    {
    private:
        char* _str = nullptr;
        size_t _size = 0;
        size_t _capacity = 0;

        void reallocate()
        {
            if(_size > _capacity)
            {
                _capacity += (_size - _capacity) + 5;

                if(_str != nullptr)
                {
                    delete[] _str;
                }

                _str = new char[_capacity];
            }
        }

    public:
        string()
        {
            _capacity = 5;
            _size = 0;
            _str = new char[_capacity];
        }

        string(const char* str)
        {
            operator=(str);
        }

        void operator=(const char* str)
        {
            _size = strlen(str);

            reallocate();
            strcpy(_str, str);
        }

        void operator+=(const char* str)
        {
            if(str == nullptr)
            {
                return;
            }

            size_t old_size = _size;
            _size += strlen(str);

            reallocate();

            strcpy(_str + old_size, str);
        }

        void operator+=(const std::string str)
        {
            operator+=(str.c_str());
        }

        string operator+(const string& rhs)
        {
            string s;
            s += rhs;

            return s;
        }

        char& at(int index)
        {
            return _str[index];
        }

        char& operator[](int index)
        {
            return at(index);
        }

        const char* c_str() const
        {
            return _str;
        }

        void clear()
        {
            memset(_str, '\0', _size);
        }

        size_t length()
        {
            return _size;
        }

        size_t size()
        {
            return _size;
        }

        size_t capacity()
        {
            return _capacity;
        }

        ~string()
        {
            if(_str != nullptr)
            {
                delete[] _str;
            }
        }
    };
}
