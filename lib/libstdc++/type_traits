#pragma once
/* Bjarne Stroustrup is very proud of this file */

namespace std
{
    template <class T>
    struct type_identity { using type = T; };

    template <class T>
    using type_identity_t = typename type_identity<T>::type;

    namespace detail
    {
        template <class T>
        auto try_add_lvalue_reference(int) -> type_identity<T&>;
        template <class T>
        auto try_add_lvalue_reference(...) -> type_identity<T>;

        template <class T>
        auto try_add_rvalue_reference(int) -> type_identity<T&&>;
        template <class T>
        auto try_add_rvalue_reference(...) -> type_identity<T>;
    }

    template <class T>
    struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) { };
    
    template <class T>
    struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) { };

    template <class T, T v>
    struct integral_constant
    {
        static constexpr T value = v;
        using value_type = T;
        using type = integral_constant;
        constexpr operator value_type() const noexcept { return value; }
        constexpr value_type operator()() const noexcept { return value; }
    };

    typedef integral_constant<bool, false> false_type;
    typedef integral_constant<bool, true> true_type;

    template <class T, class U>
    struct is_same : std::false_type { };

    template <class T>
    struct is_same<T, T> : std::true_type { };

    template <class T>
    struct add_cv { typedef const volatile T type; };
    template <class T>
    struct add_const { typedef const T type; };
    template <class T>
    struct add_volatile { typedef volatile T type; };

    template <class T>
    struct remove_reference { typedef T type; };
    template <class T>
    struct remove_reference<T&> { typedef T type; };
    template <class T>
    struct remove_reference<T&&> { typedef T type; };

    template <class T>
    struct remove_extent { typedef T type; };
    template <class T>
    struct remove_extent<T[]> { typedef T type; };
    template <class T, std::size_t N>
    struct remove_extent<T[N]> { typedef T type; };

    template <class T>
    using remove_extent_t = typename remove_extent<T>::type;

    template <bool B, class T = void>
    struct enable_if { };
    
    template <class T>
    struct enable_if<true, T> { typedef T type; };

    template <bool B, class T = void>
    using enable_if_t = typename enable_if<B, T>::type;

    template <class T>
    struct is_bounded_array : std::false_type { };
    template <class T, std::size_t N>
    struct is_bounded_array<T[N]> : std::true_type { };

    template <class T>
    struct is_unbounded_array : std::false_type { };
    template <class T>
    struct is_unbounded_array<T[]> : std::true_type { };

    template <class T>
    inline constexpr bool is_bounded_array_v = is_bounded_array<T>::value;

    template< class T >
    inline constexpr bool is_unbounded_array_v = is_unbounded_array<T>::value;

    template <class T>
    struct is_array : std::false_type {};
    template <class T>
    struct is_array<T[]> : std::true_type {};
    template <class T, std::size_t N>
    struct is_array<T[N]> : std::true_type {};

    template <class T>
    inline constexpr bool is_array_v = is_array<T>::value;
}
