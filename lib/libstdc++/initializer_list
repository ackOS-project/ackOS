#pragma once

#include <cstddef>

namespace std
{
    #if defined(__GNUC__)

    template <typename T>
    class initializer_list
    {
    public:
        using value_type = T;
        using reference = const T&;
        using const_reference = const T&;
        using iterator = const T*;
        using const_iterator = const T*;

    private:
        iterator _elements;
        size_t _size;

        constexpr initializer_list(const_iterator it, size_t size)
        :
        _elements(it), 
        _size(size)
        {
        }

    public:
        constexpr initializer_list()
        :
        _elements(0),
        _size(0)
        {
        }

        constexpr size_t size() const
        {
            return _size;
        }

        constexpr const_iterator begin() const
        {
            return _elements;
        }

        constexpr const_iterator end() const
        {
            return begin() + size();
        }
    };

    #elif defined(__clang__)

    template <typename T>
    class initializer_list
    {
    public:
        using value_type = T;
        using reference = const T&;
        using const_reference = const T&;
        using iterator = const T*;
        using const_iterator = const T*;

    private:
        const_iterator* _begin;
        const_iterator* _end;

    public:
        constexpr initializer_list()
        :
        _begin(nullptr),
        _end(nullptr)
        {
        }

        constexpr size_t size() const
        {
            return _end - _begin;
        }

        constexpr const_iterator begin() const
        {
            return _begin;
        }

        constexpr const_iterator end() const
        {
            return _end;
        }
    };

    #endif
}
