#pragma once

#include <type_traits>

namespace std
{
    template <typename T>
    void swap(T& a, T& b)
    {
        T first = a;
        T second = b;

        a = second;
        b = first;
    }

    template <class T>
    constexpr T&& forward(typename std::remove_reference<T>::type& t) noexcept
    {
        return static_cast<T&&>(t);
    }

    template <class T>
    constexpr T&& forward(typename std::remove_reference<T>::type&& t) noexcept
    {
        return static_cast<T&&>(t);
    }

    template <typename T>
    constexpr typename std::remove_reference<T>::type&& move(T&& t) noexcept
    {
        return static_cast<typename std::remove_reference<T>::type&&>(t);
    }
}